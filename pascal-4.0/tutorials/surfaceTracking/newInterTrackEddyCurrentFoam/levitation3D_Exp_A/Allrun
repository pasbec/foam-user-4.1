#!/bin/bash

flagClean=0; flagPrepare=0; flagParallel=0; flagReset=0; flagRun=0

flagRenumberMesh=0

while [[ $# -gt 0 ]]; do
    if   [[ $1 == 'clean' ]];   then flagClean=1
    elif [[ $1 == 'prepare' ]]; then flagPrepare=1
    elif [[ $1 == 'parallel' ]]; then flagParallel=1
    elif [[ $1 == 'reset' ]];   then flagReset=1
    elif [[ $1 == 'start' ]];   then
        flagPrepare=1
        flagRun=1
    else
      echo "Unsupported flag: '$1'"
    fi
    shift
done

# Helper functions
. $WM_PROJECT_USER_DIR/etc/helpFunctions.sh
. $WM_PROJECT_USER_DIR/etc/cleanFunctions.sh

setErrorTrap

regionlist_splitn=2
regionlist_split1="region_fluid region_buffer"
regionlist_split2="region_conductor region_space"
regionlist_split="$regionlist_split1 $regionlist_split2"

if [[ $flagClean -eq 1 ]]; then

    # Cleanup
    cleanCase
    for region in $regionlist_split; do
        cleanCase "$region"
    done

    # Wipe folders with org backup
    wipeOrgCopy
    for region in $regionlist_split; do
        wipeOrgCopy "$region"
    done

    # Wipe polymesh for regions
    wipePolyMesh
    for region in $regionlist_split; do
        wipePolyMesh "$region"
    done

    # Clean tools
    cleanTools

fi

if [[ $flagPrepare -eq 1 && $flagClean -eq 1 ]]; then

    # Restore polymesh folder from org backup
    restorePolyMeshOrg

    # Create polyMesh with blockMesh
    ./constant/polyMesh/blockMeshDict.py
    runApplication \
        blockMesh || exit 1

    # Mirror mesh in all directions
    directions="x y z"
    for d in $directions; do

        cp "system/mirrorMeshDict.$d" \
            'system/mirrorMeshDict'

        runApplication -l "log.mirrorMesh.$d" \
            mirrorMesh || exit 1

    done

    # Move polyMesh from 0 to constant
    moveZeroToConstantPolyMesh

    # Remove all sets and zones
    cleanPolyMeshSetsAndZones

    # Create new topoSets
    runApplication \
        setSet -noVTK -batch 'system/setSetBatch' || exit 1

    # Create new patches
    runApplication \
        createPatch -overwrite || exit 1

    # Change dictionaries
    runApplication \
        changeDictionary || exit 1

    # Create backup of topoSets
    rm "constant/polyMesh/sets/"*"_old" > /dev/null 2>&1
    mkdir 'constant/polyMesh/sets/bak'
    cp 'constant/polyMesh/sets/'* \
        'constant/polyMesh/sets/bak/' \
        > /dev/null 2>&1

    # Create meshes
    for n in $(eval echo "{1..$regionlist_splitn}"); do

        regionlist=$(eval echo \$regionlist_split$n)

        # Remove all topoSets
        rm 'constant/polyMesh/sets/'* > /dev/null 2>&1

        # Restore cellSets for this step of splitMeshRegions
        for region in $regionlist; do
            cp "constant/polyMesh/sets/bak/cellSet_$region" \
            'constant/polyMesh/sets/' || exit 1
        done

        # Remove all zones
        cleanPolyMeshZones

        # Create zones for restored topoSets
        runApplication -l "log.setsToZones.$n" \
            setsToZones || exit 1

        # Remove topoSet prefixes from topoZones
        sed -i 's/cellSet_//g' 'constant/polyMesh/cellZones' > /dev/null 2>&1
        sed -i 's/faceSet_//g' 'constant/polyMesh/faceZones' > /dev/null 2>&1
        sed -i 's/pointSet_//g' 'constant/polyMesh/pointZones' > /dev/null 2>&1

        # Split regions
        runApplication -l "log.splitMeshRegions.$n" \
            splitMeshRegions -overwrite -cellZonesOnly || exit 1

        # Remove cellToRegion
        find -name 'cellToRegion' -delete > /dev/null 2>&1

    done

    # Restore all topoSets
    cp 'constant/polyMesh/sets/bak/'* \
        'constant/polyMesh/sets/' \
        > /dev/null 2>&1

    # Add fields to 0 from org backup
    addZeroOrg

    # Move polyMesh from 0 to constant
    # for regions
    for region in $regionlist_split; do
        moveZeroToConstantPolyMesh "$region"
    done

    # Create sets
    # for regions
    for region in $regionlist_split; do
        runApplication -r "$region" \
            makeRegionSets -region "$region" || exit 1
    done

    # Create new patches and cleanup
    # for regions
    for region in $regionlist_split; do
        runApplication -r "$region" \
            createPatch -overwrite -region "$region" || exit 1

#         rm "constant/$region/polyMesh/boundaryRegionAddressing" > /dev/null 2>&1
# TODO [Low]: Fix boundaryRegionAddressing for all regions
    done

    # Change dictionaries
    # for regions
    for region in $regionlist_split; do
        runApplication -r "$region" \
            changeDictionary -region "$region" || exit 1
    done

    # Add fields to 0 from org backup
    # for regions
    for region in $regionlist_split; do
        addZeroOrg "$region"
    done

#     # Translate mesh points
#     transVector='(0 0 -0.0003)'
# #     runApplication \
#         transformPoints -translate "$transVector" || exit 1
#     for region in $regionlist_split; do
# #         runApplication -r "$region" \
#         transformPoints -region "$region" -translate "$transVector" || exit 1
#     done

    # Change fields according to funkySetFieldsDict
    runApplication \
        funkySetFields -time '0' || exit 1

    # Init turbulence values for fluid region
    runApplication \
        initTurbulenceValues -region 'region_fluid' || exit 1

    # Create finite area mesh for fluid region
    restoreFaMeshOrg 'region_fluid'
    runApplication -r 'region_fluid' \
        makeFaMesh -region 'region_fluid' || exit 1

    # Add faSubMesh to region list
    regionlist="$regionlist_split region_fluid_faSubMesh"

    # Clean old faSubMesh
    cleanPolyMesh 'region_fluid_faSubMesh'

    # Create faSubMesh
    runApplication -r 'region_fluid' \
        makeFaSubMesh -region 'region_fluid' || exit 1

    # Touch paraFoam files
    paraviewTouchFoam
    paraviewTouchOpenFOAM
    for region in $regionlist; do
        paraviewTouchOpenFOAM "$region"
    done

    if [[ $flagParallel -eq 1 ]]; then

        # Decompose mesh
        runApplication \
            decomposePar -cellDist || exit 1

        # Split cell decompositions
        for region in $regionlist; do
            runApplication -r "$region" \
                makeRegionCellDecomposition -region $region || exit 1
        done

        # Decompose mesh
        # for regions
        for region in $regionlist; do
            cp 'system/decomposeParDict.region' \
                "system/$region/decomposeParDict"

            runApplication -r "$region" \
                decomposePar -region $region || exit 1
        done

        # Decompose sets
        # for regions
        for region in $regionlist; do
            runApplication -r "$region" \
                decomposeSets -region $region || exit 1
        done

        # Decompose region addressings
        # for regions
        for region in $regionlist; do
            runApplication -r "$region" \
                decomposeRegionAddressing -region $region || exit 1
        done

        # Touch paraFoam files
        paraviewTouchFoamParallel
        paraviewTouchOpenFOAMParallel
        for region in $regionlist; do
            paraviewTouchOpenFOAMParallel "$region"
        done
    fi
fi

if [[ $flagReset -eq 1 ]]; then

    if [[ $flagParallel -eq 1 ]]; then

        # Clean time directories
        cleanTimeDirectoriesParallel

    else

        # Clean time directories
        cleanTimeDirectories

    fi

    # Remove solver log
    rm "log.$(getApplication)" > /dev/null 2>&1

fi

if [[ $flagRun -eq 1 ]]; then

    if [[ $flagParallel -eq 1 ]]; then

        np=$(ls -1d processor* | wc -l)
        runParallel $np \
            $(getApplication) || exit 1

    else

        runApplication \
            $(getApplication) || exit 1

    fi
fi
