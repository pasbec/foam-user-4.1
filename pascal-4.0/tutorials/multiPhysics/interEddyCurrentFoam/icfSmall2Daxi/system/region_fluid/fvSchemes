/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  | For copyright notice see file Copyright         |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default                               none;

    ddt(U)                                Euler;

    ddt(k)                                Euler;
    ddt(omega)                            Euler;
    ddt(epsilon)                          Euler;
    ddt(nuTilda)                          Euler;
}

gradSchemes
{
    default                               none;

    grad(U)                               Gauss linear;
    grad(p)                               Gauss linear;

    grad(k)                               Gauss linear;
    grad(omega)                           Gauss linear;
    grad(epsilon)                         Gauss linear;
    grad(nuTilda)                         Gauss linear;
}

divSchemes
{
    default                               none;

    div(rhoPhi,U)                         Gauss linear;
    div((mu*dev(grad(U).T())))            Gauss linear;
    div((muEff*dev(grad(U).T())))         Gauss linear;
    div((nuEff*dev(T(grad(U)))))          Gauss linear;

    div(phi,k)                            Gauss upwind phi;
    div(phi,epsilon)                      Gauss upwind phi;
    div(phi,omega)                        Gauss upwind phi;
    div(phi,nuTilda)                      Gauss upwind phi;
}

laplacianSchemes
{
    default                               none;

    laplacian(mu,U)                       Gauss linear corrected;
    laplacian(muEff,U)                    Gauss linear corrected;
    laplacian(nuEff,U)                    Gauss linear corrected;
    laplacian(rAUf,p)                     Gauss linear corrected;

    laplacian(DkEff,k)                    Gauss linear corrected;
    laplacian(DomegaEff,omega)            Gauss linear corrected;
    laplacian(DepsilonEff,epsilon)        Gauss linear corrected;
    laplacian(DnuTildaEff,nuTilda)        Gauss linear corrected;
}

interpolationSchemes
{
    default                               none;

    interpolate(rho)                      linear;
    interpolate(U)                        linear;
    interpolate(rAU)                      linear;
    interpolate(HbyA)                     linear;
    interpolate(F)                        linear;

    interpolate(grad(U))                  linear;
    interpolate(grad(p))                  linear;

    interpolate(grad(k))                  linear;
    interpolate(grad(epsilon))            linear;
    interpolate(grad(omega))              linear;

    // ddtPhiCorr
    interpolate(U_0)                      linear;
    interpolate(((1|deltaT)*rAU))         linear;

    interpolate(rhok)                     linear;
}

// ************************************************************************* //
