/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default                           none;
}

gradSchemes
{
    default                           none;

    curl(ARe)                         Gauss linear;
    curl(AIm)                         Gauss linear;
    snGradCorr(ARe)                   Gauss linear;
    snGradCorr(AIm)                   Gauss linear;

    grad(divARe)                      Gauss linear;
    grad(divAIm)                      Gauss linear;

    grad(VRe)                         Gauss linearWeighted sigma;
    grad(VIm)                         Gauss linearWeighted sigma;
    snGradCorr(VRe)                   Gauss linearWeighted sigma;
    snGradCorr(VIm)                   Gauss linearWeighted sigma;

    grad(VReSource)                   Gauss linear; // RC?
    grad(VImSource)                   Gauss linear; // RC?

//     curl(ARe)                         cellLimited Gauss linear 1.0;
//     curl(AIm)                         cellLimited Gauss linear 1.0;
//     snGradCorr(ARe)                   cellLimited Gauss linear 1.0;
//     snGradCorr(AIm)                   cellLimited Gauss linear 1.0;
//
//     grad(divARe)                      cellLimited Gauss linear 1.0;
//     grad(divAIm)                      cellLimited Gauss linear 1.0;
//
//     grad(VRe)                         cellLimited Gauss linearWeighted sigma 1.0;
//     grad(VIm)                         cellLimited Gauss linearWeighted sigma 1.0;
//     snGradCorr(VRe)                   cellLimited Gauss linearWeighted sigma 1.0;
//     snGradCorr(VIm)                   cellLimited Gauss linearWeighted sigma 1.0;
//
//     grad(VReSource)                   cellLimited Gauss linear 1.0; // RC?
//     grad(VImSource)                   cellLimited Gauss linear 1.0; // RC?
}

divSchemes
{
    default                           none;

    div(ARe)                          Gauss linear; // TODO
    div(AIm)                          Gauss linear; // TODO

    div(alphaf,ARe)                   Gauss linear; // TODO
    div(alphaf,AIm)                   Gauss linear; // TODO

    div(jRe)                          Gauss linear;
    div(jIm)                          Gauss linear;
}

laplacianSchemes
{
    default                           none;

    laplacian(ARe)                    Gauss linear corrected;
    laplacian(AIm)                    Gauss linear corrected;
//     laplacian(ARe)                    Gauss harmonic corrected;
//     laplacian(AIm)                    Gauss harmonic corrected;
    laplacian(rSigma,ARe)             Gauss harmonic corrected;
    laplacian(rSigma,AIm)             Gauss harmonic corrected;
    laplacian(rSigmaf,ARe)            Gauss harmonic corrected; // harmonic is not used here
    laplacian(rSigmaf,AIm)            Gauss harmonic corrected; // harmonic is not used here

    laplacian(sigma,VRe)              Gauss harmonic corrected;
    laplacian(sigma,VIm)              Gauss harmonic corrected;
    laplacian(sigmaf,VRe)             Gauss harmonic corrected; // harmonic is not used here
    laplacian(sigmaf,VIm)             Gauss harmonic corrected; // harmonic is not used here

// //     laplacian(ARe)                    Gauss linear limited 0.5; // TODO
// //     laplacian(AIm)                    Gauss linear limited 0.5; // TODO
//     laplacian(ARe)                    Gauss harmonic limited 0.5; // TODO
//     laplacian(AIm)                    Gauss harmonic limited 0.5; // TODO
//     laplacian(rSigma,ARe)             Gauss harmonic limited 0.5;
//     laplacian(rSigma,AIm)             Gauss harmonic limited 0.5;
//     laplacian(rSigmaf,ARe)            Gauss harmonic limited 0.5; // harmonic is not used here
//     laplacian(rSigmaf,AIm)            Gauss harmonic limited 0.5; // harmonic is not used here
//
//     laplacian(sigma,VRe)              Gauss harmonic limited 0.5;
//     laplacian(sigma,VIm)              Gauss harmonic limited 0.5;
//     laplacian(sigmaf,VRe)             Gauss harmonic limited 0.5; // harmonic is not used here
//     laplacian(sigmaf,VIm)             Gauss harmonic limited 0.5; // harmonic is not used here
}

interpolationSchemes
{
    default                           none;

    interpolate(sigma)                harmonic;

    interpolate(ARe)                  linear; // debug
    interpolate(AIm)                  linear; // debug

    interpolate(jRe)                  linear; // debug
    interpolate(jIm)                  linear; // debug

    interpolate(grad(VRe))            linear; // RC?
    interpolate(grad(VIm))            linear; // RC?
}

snGradSchemes
{
    default                           none;
}

// ************************************************************************* //
