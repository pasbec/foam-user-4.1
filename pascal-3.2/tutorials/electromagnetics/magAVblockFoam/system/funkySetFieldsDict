/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      funkySetFieldsDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

materialProperties
(
  "sigma_silicon_liquid=1.2e+6;"    // Conductivity of liquid silicon in [S/m]
  "sigma_silicon_solid=8.3e+4;"     // Conductivity of solid silicon in [S/m]
  "sigma_graphite=1.25e+5;"         // Conductivity of graphite in [S/m]
);

conductorData
(
  "coil_rms=1000.0;"                      // Inductor current rms value in [A]
  "coil_ldx=0.005;"                       // Inductor loop cross section x width in [m]
  "coil_ldz=0.005;"                       // Inductor loop cross section z width in [m]
  "coil_area=coil_ldx*coil_ldz;"          // Inductor cross section area in [m^2]
  "coil_amp=sqrt(2)*coil_rms;"            // Inductor current amplitude in [A]

//   "coil_denRe=sqrt(coil_amp/coil_area);"  // Inductor current density in [A/m^2]
//   "coil_denIm=sqrt(coil_amp/coil_area);"  // Inductor current density in [A/m^2]

  "coil_denRe=coil_amp/coil_area;"        // Inductor current density in [A/m^2]
  "coil_denIm=0;"                         // Inductor current density in [A/m^2]

//   "coil_denRe=0;"                         // Inductor current density in [A/m^2]
//   "coil_denIm=coil_amp/coil_area;"        // Inductor current density in [A/m^2]

  "coil_r=0.008;"                         // Inductor center radius [m]
  "coil_x0=0.065;"                        // Inductor center x size in [m]
  "coil_y0=0.120;"                        // Inductor center y size in [m]
  "coil_rx0=coil_x0-coil_r;"              // Inductor inner x size in [m]
  "coil_ry0=coil_y0-coil_r;"              // Inductor inner y size in [m]
);

expressions
(

  sigma_reset
  {
    field         sigma;
    variables     $materialProperties;
    expression    "1e-6";
//     expression    "sigma_silicon_liquid";
    keepPatches   true;
  }

  cellSet_material_conductuctor
  {
    field         sigma;
    variables     $materialProperties;
    condition     "set(cellSet_material_conductuctor)";
    expression    "sigma_silicon_liquid";
    keepPatches   true;
  }

  jsRe_coil_reset
  {
    field         jsRe;
    expression    "vector (0,0,0)";
    keepPatches   true;
  }

  jsRe_coil_x_plus
  {
    field         jsRe;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x>=0                 \
                   && mag(pos().y)<=coil_ry0     ";
    expression    "vector (0,coil_denRe,0)";
    keepPatches   true;
  }

  jsRe_coil_x_minus
  {
    field         jsRe;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x<=0                 \
                   && mag(pos().y)<=coil_ry0     ";
    expression    "vector (0,-coil_denRe,0)";
    keepPatches   true;
  }

  jsRe_coil_y_plus
  {
    field         jsRe;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().y>=0                 \
                   && mag(pos().x)<=coil_rx0     ";
    expression    "vector (-coil_denRe,0,0)";
    keepPatches   true;
  }

  jsRe_coil_y_minus
  {
    field         jsRe;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().y<=0                 \
                   && mag(pos().x)<=coil_rx0     ";
    expression    "vector (coil_denRe,0,0)";
    keepPatches   true;
  }

  jsRe_coil_x_plus_y_plus
  {
    field         jsRe;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x>=coil_rx0          \
                   && pos().y>=coil_ry0          ";
    expression    "vector (                                                                                                              \
                       1.0/(sqrt(pow((pos().y-coil_ry0)/(pos().x-coil_rx0),2)+1)) * ((pos().y-coil_ry0)/(pos().x-coil_rx0)) * -coil_denRe, \
                       1.0/(sqrt(pow((pos().y-coil_ry0)/(pos().x-coil_rx0),2)+1))                                           *  coil_denRe, \
                       0                                                                                                                 \
                  )";
    keepPatches   true;
  }

  jsRe_coil_x_minus_y_plus
  {
    field         jsRe;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x<=-coil_rx0         \
                   && pos().y>=coil_ry0          ";
    expression    "vector (                                                                                                              \
                       1.0/(sqrt(pow((pos().y-coil_ry0)/(pos().x+coil_rx0),2)+1)) * ((pos().y-coil_ry0)/(pos().x+coil_rx0)) *  coil_denRe, \
                       1.0/(sqrt(pow((pos().y-coil_ry0)/(pos().x+coil_rx0),2)+1))                                           * -coil_denRe, \
                       0                                                                                                                 \
                  )";
    keepPatches   true;
  }

  jsRe_coil_x_plus_y_minus
  {
    field         jsRe;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x>=coil_rx0          \
                   && pos().y<=-coil_ry0         ";
    expression    "vector (                                                                                                              \
                       1.0/(sqrt(pow((pos().y+coil_ry0)/(pos().x-coil_rx0),2)+1)) * ((pos().y+coil_ry0)/(pos().x-coil_rx0)) * -coil_denRe, \
                       1.0/(sqrt(pow((pos().y+coil_ry0)/(pos().x-coil_rx0),2)+1))                                           *  coil_denRe, \
                       0                                                                                                                 \
                  )";
    keepPatches   true;
  }

  jsRe_coil_x_minus_y_plus
  {
    field         jsRe;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x<=-coil_rx0         \
                   && pos().y<=-coil_ry0         ";
    expression    "vector (                                                                                                              \
                       1.0/(sqrt(pow((pos().y+coil_ry0)/(pos().x+coil_rx0),2)+1)) * ((pos().y+coil_ry0)/(pos().x+coil_rx0)) *  coil_denRe, \
                       1.0/(sqrt(pow((pos().y+coil_ry0)/(pos().x+coil_rx0),2)+1))                                           * -coil_denRe, \
                       0                                                                                                                 \
                  )";
    keepPatches   true;
  }

  jsIm_coil_reset
  {
    field         jsIm;
    expression    "vector (0,0,0)";
    keepPatches   true;
  }

  jsIm_coil_x_plus
  {
    field         jsIm;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x>=0                 \
                   && mag(pos().y)<=coil_ry0     ";
    expression    "vector (0,coil_denIm,0)";
    keepPatches   true;
  }

  jsIm_coil_x_minus
  {
    field         jsIm;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x<=0                 \
                   && mag(pos().y)<=coil_ry0     ";
    expression    "vector (0,-coil_denIm,0)";
    keepPatches   true;
  }

  jsIm_coil_y_plus
  {
    field         jsIm;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().y>=0                 \
                   && mag(pos().x)<=coil_rx0     ";
    expression    "vector (-coil_denIm,0,0)";
    keepPatches   true;
  }

  jsIm_coil_y_minus
  {
    field         jsIm;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().y<=0                 \
                   && mag(pos().x)<=coil_rx0     ";
    expression    "vector (coil_denIm,0,0)";
    keepPatches   true;
  }

  jsIm_coil_x_plus_y_plus
  {
    field         jsIm;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x>=coil_rx0          \
                   && pos().y>=coil_ry0          ";
    expression    "vector (                                                                                                              \
                       1.0/(sqrt(pow((pos().y-coil_ry0)/(pos().x-coil_rx0),2)+1)) * ((pos().y-coil_ry0)/(pos().x-coil_rx0)) * -coil_denIm, \
                       1.0/(sqrt(pow((pos().y-coil_ry0)/(pos().x-coil_rx0),2)+1))                                           *  coil_denIm, \
                       0                                                                                                                 \
                  )";
    keepPatches   true;
  }

  jsIm_coil_x_minus_y_plus
  {
    field         jsIm;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x<=-coil_rx0         \
                   && pos().y>=coil_ry0          ";
    expression    "vector (                                                                                                              \
                       1.0/(sqrt(pow((pos().y-coil_ry0)/(pos().x+coil_rx0),2)+1)) * ((pos().y-coil_ry0)/(pos().x+coil_rx0)) *  coil_denIm, \
                       1.0/(sqrt(pow((pos().y-coil_ry0)/(pos().x+coil_rx0),2)+1))                                           * -coil_denIm, \
                       0                                                                                                                 \
                  )";
    keepPatches   true;
  }

  jsIm_coil_x_plus_y_minus
  {
    field         jsIm;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x>=coil_rx0          \
                   && pos().y<=-coil_ry0         ";
    expression    "vector (                                                                                                              \
                       1.0/(sqrt(pow((pos().y+coil_ry0)/(pos().x-coil_rx0),2)+1)) * ((pos().y+coil_ry0)/(pos().x-coil_rx0)) * -coil_denIm, \
                       1.0/(sqrt(pow((pos().y+coil_ry0)/(pos().x-coil_rx0),2)+1))                                           *  coil_denIm, \
                       0                                                                                                                 \
                  )";
    keepPatches   true;
  }

  jsIm_coil_x_minus_y_plus
  {
    field         jsIm;
    variables     $conductorData;
    condition     "   set(cellSet_geometry_coil) \
                   && pos().x<=-coil_rx0         \
                   && pos().y<=-coil_ry0         ";
    expression    "vector (                                                                                                              \
                       1.0/(sqrt(pow((pos().y+coil_ry0)/(pos().x+coil_rx0),2)+1)) * ((pos().y+coil_ry0)/(pos().x+coil_rx0)) *  coil_denIm, \
                       1.0/(sqrt(pow((pos().y+coil_ry0)/(pos().x+coil_rx0),2)+1))                                           * -coil_denIm, \
                       0                                                                                                                 \
                  )";
    keepPatches   true;
  }
);

// ************************************************************************* //
